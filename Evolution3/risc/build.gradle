/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'com.bmuschko.clover' version '2.2.3'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    // https://mvnrepository.com/artifact/org.assertj/assertj-swing
    
}
repositories{
    mavenCentral()
}


javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.base', 'javafx.graphics' ]
}

subprojects{
    apply plugin: "java"
    apply plugin: "com.bmuschko.clover"
    repositories {
        jcenter()
    }

    dependencies {
        implementation 'com.google.guava:guava:28.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
        clover 'org.openclover:clover:4.3.1'
        testCompile "org.mockito:mockito-core:2.+"
        testCompile "org.assertj:assertj-core:3.11.1" 
        compile "org.jgrapht:jgrapht-core:1.4.0"
        
    }
    clover{
        compiler{
            additionalArgs = "-g:lines,source,vars"
        }
        report{
            xml= true
            html = true
        }

    }

    test{
        testLogging{
            showStandardStreams = true
            exceptionFormat = 'full'
        }
    }
    test {
        // Use junit platform for unit tests
        useJUnitPlatform()
    }
}
// resolve dependencies build
tasks.withType(JavaCompile) {
 options.debug = true
}
task resolveDependencies {
   doLast {
       project.rootProject.allprojects.each { subProject ->
           subProject.buildscript.configurations.each { configuration->
              if(configuration.canBeResolved) {
                 configuration.resolve()
              }
           }
           subProject.configurations.each { configuration ->
              if(configuration.canBeResolved) {
                 configuration.resolve()
              }
           }
       }
   }
}

project (':server'){
    dependencies {
        implementation project(':shared')
        implementation project(':client')
        implementation project(':hostmaster')        
    }
}


// Project specific stuff
project (':shared'){
}

project (':client'){
    dependencies {
        implementation project(':shared')
        // implementation project(':server')                
    } 
}
project (':hostmaster'){
    dependencies {
        implementation project(':shared')
    } 
}


tasks.register("run-server") {
    dependsOn project('server').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Server'
}

tasks.register("run-client") {
    dependsOn project('client').getTasksByName('run',false)
    group = 'Run Client/Server'
    description = 'Run the Client'
}

tasks.register("run-hostmaster") {
    dependsOn project('hostmaster').getTasksByName('run',false)
    group = 'Run Client/Server/hostmaster'
    description = 'Run the hostmaster'
}
